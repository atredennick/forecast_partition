panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color="white"),
panel.background   = element_rect(fill = "#EFEFEF"),
axis.text          = element_text(size=10, color="grey35", family = "Arial Narrow"),
axis.title         = element_text(size=12, family = "Arial Narrow", face = "bold"),
panel.border       = element_blank(),
axis.line.x        = element_line(color="black"),
axis.line.y        = element_line(color="black"),
strip.background   = element_blank(),
strip.text         = element_text(size=10, color="grey15", family = "Arial Narrow"),
legend.position    = c(0.1,0.8),
legend.key         = element_rect(fill = "#EFEFEF"))
mycol <- c("#278DAF", "#CF4C26")
ggplot(rmse_df, aes(x = year, y = rmse, color = model))+
geom_line()+
geom_point(size = 2)+
scale_x_continuous(breaks = rmse_df$year)+
scale_color_manual(values = mycol, name = NULL, labels = c("Known SWE","Mean SWE"))+
xlab("Forecast Year")+
ylab("RMSE (number of bison)")+
theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color="white"),
panel.background   = element_rect(fill = "#EFEFEF"),
axis.text          = element_text(size=10, color="grey35", family = "Arial Narrow"),
axis.title         = element_text(size=12, family = "Arial Narrow", face = "bold"),
panel.border       = element_blank(),
axis.line.x        = element_line(color="black"),
axis.line.y        = element_line(color="black"),
strip.background   = element_blank(),
strip.text         = element_text(size=10, color="grey15", family = "Arial Narrow"),
legend.position    = c(0.1,0.8),
legend.key         = element_rect(fill = "#EFEFEF"),
legend.background  = element_rect(fill = "#EFEFEF"))
rmse_df <- rbind(est_swe_df, avg_swe_df)
mycol <- c("#278DAF", "#CF4C26")
ggplot(rmse_df, aes(x = year, y = rmse, color = model))+
geom_line()+
geom_point(size = 2)+
scale_x_continuous(breaks = rmse_df$year)+
scale_color_manual(values = mycol, name = NULL, labels = c("Known SWE","Mean SWE"))+
xlab("Forecast Year")+
ylab("RMSE (number of bison)")+
theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color="white"),
panel.background   = element_rect(fill = "#EFEFEF"),
axis.text          = element_text(size=10, color="grey35", family = "Arial Narrow"),
axis.title         = element_text(size=12, family = "Arial Narrow", face = "bold"),
panel.border       = element_blank(),
axis.line.x        = element_line(color="black"),
axis.line.y        = element_line(color="black"),
strip.background   = element_blank(),
strip.text         = element_text(size=10, color="grey15", family = "Arial Narrow"),
legend.position    = c(0.1,0.8),
legend.key         = element_rect(fill = "#EFEFEF"),
legend.background  = element_rect(fill = "#EFEFEF"),
legend.text        = element_text(size=10, color="grey15", family = "Arial Narrow"))
mycol <- c("#278DAF", "#CF4C26")
ggplot(rmse_df, aes(x = year, y = rmse, color = model))+
geom_line()+
geom_point(size = 2)+
scale_x_continuous(breaks = rmse_df$year)+
scale_color_manual(values = mycol, name = NULL, labels = c("Known SWE","Mean SWE"))+
xlab("Forecast Year")+
ylab("RMSE (number of bison)")+
theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color="white"),
panel.background   = element_rect(fill = "#EFEFEF"),
axis.text          = element_text(size=10, color="grey35", family = "Arial Narrow"),
axis.title         = element_text(size=12, family = "Arial Narrow", face = "bold"),
panel.border       = element_blank(),
axis.line.x        = element_line(color="black"),
axis.line.y        = element_line(color="black"),
strip.background   = element_blank(),
strip.text         = element_text(size=10, color="grey15", family = "Arial Narrow"),
legend.position    = c(0.1,0.8),
legend.key         = element_rect(fill = NULL),
legend.background  = element_rect(fill = NULL),
legend.text        = element_text(size=10, color="grey15", family = "Arial Narrow"))
mycol <- c("#278DAF", "#CF4C26")
ggplot(rmse_df, aes(x = year, y = rmse, color = model))+
geom_line()+
geom_point(size = 2)+
scale_x_continuous(breaks = rmse_df$year)+
scale_color_manual(values = mycol, name = NULL, labels = c("Known SWE","Mean SWE"))+
xlab("Forecast Year")+
ylab("RMSE (number of bison)")+
theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color="white"),
panel.background   = element_rect(fill = "#EFEFEF"),
axis.text          = element_text(size=10, color="grey35", family = "Arial Narrow"),
axis.title         = element_text(size=12, family = "Arial Narrow", face = "bold"),
panel.border       = element_blank(),
axis.line.x        = element_line(color="black"),
axis.line.y        = element_line(color="black"),
strip.background   = element_blank(),
strip.text         = element_text(size=10, color="grey15", family = "Arial Narrow"),
legend.position    = c(0.1,0.8),
legend.key         = element_rect(fill = NULL),
legend.background  = element_rect(fill = NA),
legend.text        = element_text(size=10, color="grey15", family = "Arial Narrow"))
mycol <- c("#278DAF", "#CF4C26")
ggplot(rmse_df, aes(x = year, y = rmse, color = model))+
geom_line()+
geom_point(size = 2)+
scale_x_continuous(breaks = rmse_df$year)+
scale_color_manual(values = mycol, name = NULL, labels = c("Known SWE","Mean SWE"))+
xlab("Forecast Year")+
ylab("RMSE (number of bison)")+
theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color="white"),
panel.background   = element_rect(fill = "#EFEFEF"),
axis.text          = element_text(size=10, color="grey35", family = "Arial Narrow"),
axis.title         = element_text(size=12, family = "Arial Narrow", face = "bold"),
panel.border       = element_blank(),
axis.line.x        = element_line(color="black"),
axis.line.y        = element_line(color="black"),
strip.background   = element_blank(),
strip.text         = element_text(size=10, color="grey15", family = "Arial Narrow"),
legend.position    = c(0.2,0.8),
legend.key         = element_rect(fill = NA),
legend.background  = element_rect(fill = NA),
legend.text        = element_text(size=10, color="grey15", family = "Arial Narrow"))
ggsave(filename = "../figures/rmse_by_mod.png", width = 4, height = 4, units = "in", dpi = 120)
####
####  MAKE THE RMSE PLOT AND SAVE ----------------------------------------------
####
mycol <- c("#278DAF", "#CF4C26")
ggplot(rmse_df, aes(x = year, y = rmse, fill = model))+
geom_line()+
geom_point(size = 2, shape = 21, color = "#EFEFEF")+
scale_x_continuous(breaks = rmse_df$year)+
scale_fill_manual(values = mycol, name = NULL, labels = c("Known SWE","Mean SWE"))+
xlab("Forecast Year")+
ylab("RMSE (number of bison)")+
theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color="white"),
panel.background   = element_rect(fill = "#EFEFEF"),
axis.text          = element_text(size=10, color="grey35", family = "Arial Narrow"),
axis.title         = element_text(size=12, family = "Arial Narrow", face = "bold"),
panel.border       = element_blank(),
axis.line.x        = element_line(color="black"),
axis.line.y        = element_line(color="black"),
strip.background   = element_blank(),
strip.text         = element_text(size=10, color="grey15", family = "Arial Narrow"),
legend.position    = c(0.2,0.8),
legend.key         = element_rect(fill = NA),
legend.background  = element_rect(fill = NA),
legend.text        = element_text(size=10, color="grey15", family = "Arial Narrow"))
mycol <- c("#278DAF", "#CF4C26")
ggplot(rmse_df, aes(x = year, y = rmse, color = model))+
geom_line()+
geom_point(size = 3, color = "#EFEFEF")+
geom_point(size = 2)+
scale_x_continuous(breaks = rmse_df$year)+
scale_color_manual(values = mycol, name = NULL, labels = c("Known SWE","Mean SWE"))+
xlab("Forecast Year")+
ylab("RMSE (number of bison)")+
theme_bw()+
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(color="white"),
panel.background   = element_rect(fill = "#EFEFEF"),
axis.text          = element_text(size=10, color="grey35", family = "Arial Narrow"),
axis.title         = element_text(size=12, family = "Arial Narrow", face = "bold"),
panel.border       = element_blank(),
axis.line.x        = element_line(color="black"),
axis.line.y        = element_line(color="black"),
strip.background   = element_blank(),
strip.text         = element_text(size=10, color="grey15", family = "Arial Narrow"),
legend.position    = c(0.2,0.8),
legend.key         = element_rect(fill = NA),
legend.background  = element_rect(fill = NA),
legend.text        = element_text(size=10, color="grey15", family = "Arial Narrow"))
ggsave(filename = "../figures/rmse_by_mod.png", width = 4, height = 4, units = "in", dpi = 120)
ggplot(rmse_df, aes(x = year, y = rmse, color = model))+
geom_line()+
geom_point(size = 3, color = "#EFEFEF")+
geom_point(size = 2)+
scale_x_continuous(breaks = rmse_df$year)
source('~/Repos/bison_forecast/code/validate_models.R')
################################################################################
##  fetch_ynp_snow.R: script to download and summarize SNOTEL data for
##  Yellowstone National Park.
##
## _____________________________________________________________________________
##  Author: Andrew Tredennick
##  Date created: September 5, 2017
################################################################################
rm(list = ls(all.names = T))
##  Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only for RStudio
####
####  LOAD LIBRARIES ----
####
# library(devtools)
# install_github("khufkens/snotelr")
library(tidyverse)
library(dplyr)
library(stringr)
library(snotelr)
library(wux)
####
####  FETCH THE WEST YELLOWSTONE SNOTEL DATA (SITE #924) ----
####
setwd("../data/")
snotel.info(path = ".")
# download.snotel(site = 924) # West Yellowstone SNOTEL
download.snotel(site = 384) # Canyon SNOTEL
file.remove("snotel_metadata.csv")
source('~/Repos/bison_forecast/code/fetch_ynp_snow.R')
################################################################################
##  fetch_ynp_snow.R: script to download and summarize SNOTEL data for
##  Yellowstone National Park.
##
## _____________________________________________________________________________
##  Author: Andrew Tredennick
##  Date created: September 5, 2017
################################################################################
rm(list = ls(all.names = T))
##  Set working directory to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # only for RStudio
####
####  LOAD LIBRARIES ----
####
# library(devtools)
# install_github("khufkens/snotelr")
library(tidyverse)
library(dplyr)
library(stringr)
library(snotelr)
library(wux)
####
####  FETCH THE WEST YELLOWSTONE SNOTEL DATA (SITE #924) ----
####
setwd("../data/")
snotel.info(path = ".")
### WEST YELLOWSTONE SNOTEL
download.snotel(site = 924)
file.remove("snotel_metadata.csv")
ynp_snotel <- read.csv("snotel_924.csv", skip = 58) %>%
dplyr::rename(date = Date,
snow_water_eq_mm    = Snow.Water.Equivalent..mm..Start.of.Day.Values,
precip_accum_mm     = Precipitation.Accumulation..mm..Start.of.Day.Values,
max_air_temp_degC   = Air.Temperature.Maximum..degC.,
min_air_temp_degC   = Air.Temperature.Minimum..degC.,
avg_air_temp_degC   = Air.Temperature.Average..degC.,
precip_increment_mm = Precipitation.Increment..mm.) %>%
separate(date, into = c("year", "month", "day"), sep = "-") %>%
group_by(year) %>%
summarise(mean_snow_water_equiv_mm  = mean(snow_water_eq_mm, na.rm=TRUE),
accum_snow_water_equiv_mm = sum(snow_water_eq_mm, na.rm=TRUE),
max_snow_water_equiv_mm   = max(snow_water_eq_mm, na.rm=TRUE),
sd_snow_water_equiv_mm    = sd(snow_water_eq_mm, na.rm=TRUE))
write.csv(ynp_snotel, "west_yellowstone_snotel_summary.csv")
### CANYON SNOTEL
snotel.info(path = ".")
download.snotel(site = 384)
file.remove("snotel_metadata.csv")
ynp_snotel <- read.csv("snotel_384.csv", skip = 58) %>%
dplyr::rename(date = Date,
snow_water_eq_mm    = Snow.Water.Equivalent..mm..Start.of.Day.Values,
precip_accum_mm     = Precipitation.Accumulation..mm..Start.of.Day.Values,
max_air_temp_degC   = Air.Temperature.Maximum..degC.,
min_air_temp_degC   = Air.Temperature.Minimum..degC.,
avg_air_temp_degC   = Air.Temperature.Average..degC.,
precip_increment_mm = Precipitation.Increment..mm.) %>%
separate(date, into = c("year", "month", "day"), sep = "-") %>%
group_by(year) %>%
summarise(mean_snow_water_equiv_mm  = mean(snow_water_eq_mm, na.rm=TRUE),
accum_snow_water_equiv_mm = sum(snow_water_eq_mm, na.rm=TRUE),
max_snow_water_equiv_mm   = max(snow_water_eq_mm, na.rm=TRUE),
sd_snow_water_equiv_mm    = sd(snow_water_eq_mm, na.rm=TRUE))
write.csv(ynp_snotel, "canyon_snotel_summary.csv")
################################################################################
##  bison_forecast.R: R script to fit a population growth model for YNP Bison,
##  forecast 7 new years.
##
##  ____________________________________________________________________________
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##  Date created: December 1, 2017
################################################################################
##  Clear everything...
rm(list = ls(all.names = TRUE))
##  Set working directory to source file location
root <- "~/Repos/bison_forecast/"
setwd(paste0(root,"code/"))
####
####  LOAD LIBRARIES -----------------------------------------------------------
####
library(tidyverse) # Data science functions
library(dplyr)     # Data wrangling
library(rjags)     # Fitting Bayesian models with JAGS
library(coda)      # MCMC summaries
library(ggmcmc)    # MCMC-to-dataframe functions
# library(devtools) # For installing packages from GitHub
# install_github("atredennick/ecoforecastR") # get latest version
library(ecoforecastR) # MCMC manipulation (by M. Dietze; modified by A. Tredennick)
####
####  LOAD DATA ----------------------------------------------------------------
####
# snow_ynp  <- read.csv("../data/west_yellowstone_snotel_summary.csv", row.names = 1)
snow_ynp  <- read.csv("../data/canyon_snotel_summary.csv", row.names = 1)
bison_raw <- read.csv("../data/YNP_bison_population_size.csv")
bison_dat <- bison_raw %>%
dplyr::select(-source) %>%     # drop the source column
mutate(set = ifelse(year < 2011, "training", "validation")) %>% # make new column for data splits
left_join(snow_ynp, by="year") # merge in SNOTEL data
####
####  JAGS State-Space Model ---------------------------------------------------
####
r_mu_prior <- log(1.11) # lambda = 1.11 in Hobbs et al. 2015
r_sd_prior <- sd(log(rnorm(100000,1.11,0.024))) # sd_lambda = 0.024 in Hobbs et al. 2015
my_model <- "
model{
#### Variance Priors
sigma_proc ~ dgamma(0.01,0.01)
tau_proc   <- 1/sigma_proc^2
eta        ~ dunif(0, 50)
#### Fixed Effects Priors
r  ~ dnorm(0.1, 1/0.02^2) # intrinsic growth rate, informed prior
b  ~ dnorm(0,0.0001)      # strength of density dependence
b1 ~ dnorm(0,0.0001)      # effect of snow
#### Initial Conditions
z[1]    ~ dnorm(Nobs[1], tau_obs[1]) # varies around observed abundance at t = 1
zlog[1] <- log(z[1]) # set first zlog
#### Process Model
for(t in 2:npreds){
# Gompertz growth, on log scale
mu[t]   <- zlog[t-1] + r + b*zlog[t-1] + b1*x[t]
zlog[t] ~ dnorm(mu[t], tau_proc)
z[t]    <- exp(zlog[t]) # back transform to arithmetic scale
}
#### Data Model
for(j in 2:n){
p[j]     <- eta/(eta + z[j]) # calculate NB centrality parameter
Nobs[j]  ~ dnegbin(p[j], eta) # NB likelihood
}
####  Derived Quantities for Model Evaluation
for(i in 1:n){
# For autocorrelation test
epsilon.obs[i] <- Nobs[i] - z[i]
# Simulate new data
p2[i]        <- eta/(eta + z[i])
Nnew [i]     ~ dnegbin(p2[i], eta)
sqerr[i]     <- (Nobs[i] - z[i])^2
sqerr_new[i] <- (Nnew[i] - z[i])^2
}
fit     <- sum(sqerr[])
fit.new <- sum(sqerr_new[])
pvalue  <- step(fit.new-fit)
}"
####
####  Fit Bison Forecasting Model ----------------------------------------------
####
##  For years without observation error, set to max observed standard deviation
##  TODO: Impute sigma_obs in the model?
na_sds                       <- which(is.na(bison_dat$count.sd)==T)
bison_dat[na_sds,"count.sd"] <- max(bison_dat$count.sd, na.rm=T)
##  Split into training and validation sets
training_dat   <- filter(bison_dat, set == "training")
validation_dat <- filter(bison_dat, set == "validation")
##  Set up SWE knowns (2011-2017), relative to scaling of observations
swe_mean     <- mean(training_dat$accum_snow_water_equiv_mm)
swe_sd       <- sd(training_dat$accum_snow_water_equiv_mm)
forecast_swe <- snow_ynp %>%
filter(year %in% validation_dat$year) %>%
pull(accum_snow_water_equiv_mm)
scl_fut_swe  <- (forecast_swe - swe_mean) / swe_sd
##  Set initial values for unkown parameters
inits <- list(
list(sigma_proc = 0.01,
r = 0.05,
b = -0.001,
b1 = -0.5),
list(sigma_proc = 0.3,
r = 0.4,
b = -0.1,
b1 = -0.01),
list(sigma_proc = 0.1,
r = 0.7,
b = -0.00001,
b1 = -0.2)
)
####
####  FIT AND FORECAST WITH KNOWN SWE
####
##  Prepare data list
mydat <- list(Nobs    = round(training_dat$count.mean), # mean counts
n       = nrow(training_dat), # number of observations
tau_obs = 1/training_dat$count.sd^2, # transform s.d. to precision
x       = c(as.numeric(scale(training_dat$accum_snow_water_equiv_mm)),scl_fut_swe), # snow depth, plus forecast years
npreds  = nrow(training_dat)+nrow(validation_dat)) # number of total predictions (obs + forecast)
##  Random variables to collect
out_variables <- c("r", "b", "b1", "eta", "sigma_proc", "z", "pvalue", "fit", "fit.new")
##  Send to JAGS
mc3     <- jags.model(file = textConnection(my_model),
data = mydat,
n.chains = length(inits),
n.adapt = 5000,
inits = inits)
update(mc3, n.iter = 10000)
mc3.out <- coda.samples(model=mc3,
variable.names=out_variables,
n.iter=10000)
################################################################################
##  bison_forecast.R: R script to fit a population growth model for YNP Bison,
##  forecast 7 new years.
##
##  ____________________________________________________________________________
##  Author:       Andrew Tredennick (atredenn@gmail.com)
##  Date created: December 1, 2017
################################################################################
##  Clear everything...
rm(list = ls(all.names = TRUE))
##  Set working directory to source file location
root <- "~/Repos/bison_forecast/"
setwd(paste0(root,"code/"))
####
####  LOAD LIBRARIES -----------------------------------------------------------
####
library(tidyverse) # Data science functions
library(dplyr)     # Data wrangling
library(rjags)     # Fitting Bayesian models with JAGS
library(coda)      # MCMC summaries
library(ggmcmc)    # MCMC-to-dataframe functions
# library(devtools) # For installing packages from GitHub
# install_github("atredennick/ecoforecastR") # get latest version
library(ecoforecastR) # MCMC manipulation (by M. Dietze; modified by A. Tredennick)
####
####  LOAD DATA ----------------------------------------------------------------
####
# snow_ynp  <- read.csv("../data/west_yellowstone_snotel_summary.csv", row.names = 1)
snow_ynp  <- read.csv("../data/canyon_snotel_summary.csv", row.names = 1)
bison_raw <- read.csv("../data/YNP_bison_population_size.csv")
bison_dat <- bison_raw %>%
dplyr::select(-source) %>%     # drop the source column
mutate(set = ifelse(year < 2011, "training", "validation")) %>% # make new column for data splits
left_join(snow_ynp, by="year") # merge in SNOTEL data
head(bison_dat)
####
####  FETCH THE WEST YELLOWSTONE SNOTEL DATA (SITE #924) ----
####
setwd("../data/")
ynp_snotel <- read.csv("snotel_384.csv", skip = 58)
head(ynp_snotel)
ynp_snotel <- read.csv("snotel_384.csv", skip = 58) %>%
dplyr::rename(date = Date,
snow_water_eq_mm    = Snow.Water.Equivalent..mm..Start.of.Day.Values,
precip_accum_mm     = Precipitation.Accumulation..mm..Start.of.Day.Values,
max_air_temp_degC   = Air.Temperature.Maximum..degC.,
min_air_temp_degC   = Air.Temperature.Minimum..degC.,
avg_air_temp_degC   = Air.Temperature.Average..degC.,
precip_increment_mm = Precipitation.Increment..mm.) %>%
separate(date, into = c("year", "month", "day"), sep = "-")
View(ynp_snotel)
View(ynp_snotel)
ynp_snotel <- read.csv("snotel_384.csv", skip = 58) %>%
dplyr::rename(date = Date,
snow_water_eq_mm    = Snow.Water.Equivalent..mm..Start.of.Day.Values,
precip_accum_mm     = Precipitation.Accumulation..mm..Start.of.Day.Values,
max_air_temp_degC   = Air.Temperature.Maximum..degC.,
min_air_temp_degC   = Air.Temperature.Minimum..degC.,
avg_air_temp_degC   = Air.Temperature.Average..degC.,
precip_increment_mm = Precipitation.Increment..mm.) %>%
separate(date, into = c("year", "month", "day"), sep = "-") %>%
group_by(year) %>%
summarise(mean_snow_water_equiv_mm  = mean(snow_water_eq_mm, na.rm=TRUE),
accum_snow_water_equiv_mm = sum(snow_water_eq_mm, na.rm=TRUE),
max_snow_water_equiv_mm   = max(snow_water_eq_mm, na.rm=TRUE),
sd_snow_water_equiv_mm    = sd(snow_water_eq_mm, na.rm=TRUE))
View(ynp_snotel)
source('~/Repos/bison_forecast/code/fetch_ynp_snow.R')
ynp_snotel
### THUMB DIVIDE SNOTEL
snotel.info(path = ".")
download.snotel(site = 577)
file.remove("snotel_metadata.csv")
ynp_snotel <- read.csv("snotel_577.csv", skip = 58) %>%
dplyr::rename(date = Date,
snow_water_eq_mm    = Snow.Water.Equivalent..mm..Start.of.Day.Values,
precip_accum_mm     = Precipitation.Accumulation..mm..Start.of.Day.Values,
max_air_temp_degC   = Air.Temperature.Maximum..degC.,
min_air_temp_degC   = Air.Temperature.Minimum..degC.,
avg_air_temp_degC   = Air.Temperature.Average..degC.,
precip_increment_mm = Precipitation.Increment..mm.) %>%
separate(date, into = c("year", "month", "day"), sep = "-") %>%
group_by(year) %>%
summarise(mean_snow_water_equiv_mm  = mean(snow_water_eq_mm, na.rm=TRUE),
accum_snow_water_equiv_mm = sum(snow_water_eq_mm, na.rm=TRUE),
max_snow_water_equiv_mm   = max(snow_water_eq_mm, na.rm=TRUE),
sd_snow_water_equiv_mm    = sd(snow_water_eq_mm, na.rm=TRUE))
ynp_snotel
